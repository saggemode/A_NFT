import { ethers } from "ethers";
import NftCard from "../components/NftCard";
import Layout from "../components/Layout";
import axios from "axios";
import Web3Modal from "web3modal";

import NFT from "../engine/NFT.json";
import Market from "../engine/Market.json";
import { useEffect, useState } from "react";
import { cipherHH, simpleCrypto } from '../engine/configuration';
import { hhmarketaddress, hhnftaddress } from "../engine/configuration";
import NotListed from "../components/NotListed";

export default function Home() {
  const [nfts, setNfts] = useState([]);
  const [loadingState, setLoadingState] = useState("not-loaded");
  const [message, updateMessage] = useState("");

  useEffect(() => {
    loadNFTs();
  }, []);

  async function loadNFTss() {
    const provider = new ethers.providers.JsonRpcProvider(
      "https://eth-goerli.g.alchemy.com/v2/r9MCa26NZGKfg28RkP_u1_JSqK0dBo87"
    );
    const tokenContract = new ethers.Contract(hhnftaddress, NFT, provider);
    const marketContract = new ethers.Contract(
      hhmarketaddress,
      Market,
      provider
    );

    const data = await marketContract.getAvailableNft();

    const items = await Promise.all(
      data.map(async (i) => {
        const tokenUri = await tokenContract.tokenURI(i.tokenId);
        const meta = await axios.get(tokenUri);
        let price = ethers.utils.formatUnits(i.price.toString(), "ether");
        let item = {
          price,
          tokenId: i.tokenId.toNumber(),
          seller: i.seller,
          owner: i.owner,
          image: meta.data.image,
          name: meta.data.name,
          description: meta.data.description,
        };
        return item;
      })
    );

    setNfts(items);
    setLoadingState("loaded");
  }

  async function loadNFTs() {
    const hhPrivkey = simpleCrypto.decrypt(cipherHH)
    //const provider = new ethers.providers.JsonRpcProvider(mainnet)
    const provider = new ethers.providers.JsonRpcProvider(
      "https://eth-goerli.g.alchemy.com/v2/r9MCa26NZGKfg28RkP_u1_JSqK0dBo87"
    );
    const wallet = new ethers.Wallet(hhPrivkey, provider);
    const tokenContract = new ethers.Contract(hhnftaddress, NFT, wallet)
    const marketContract = new ethers.Contract(hhmarketaddress, Market, wallet)
    const data = await marketContract.getAvailableNft()
    const items = await Promise.all(data.map(async i => {
      const tokenUri = await tokenContract.tokenURI(i.tokenId)
      const meta = await axios.get(tokenUri)
      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
      let item = {
        price,
        tokenId: i.tokenId.toNumber(),
        seller: i.seller,
        owner: i.owner,
        image: meta.data.image,
        name: meta.data.name,
        description: meta.data.description,
      }
      return item
    }))
    setNfts(items);
    setLoadingState("loaded");
  }

  async function buyNFT(nft) {
    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);

    const signer = provider.getSigner();
    const contract = new ethers.Contract(hhmarketaddress, Market, signer);

    const price = ethers.utils.parseUnits(nft.price.toString(), "ether");
    const transaction = await contract.n2DMarketSale(
      hhnftaddress,
      nft.tokenId,
      {
        value: price,
      }
    );
    await transaction.wait();

    loadNFTs();
  }
  if (loadingState === "loaded" && !nfts.length) return <NotListed />;

  return (
    <Layout>
      <div className="grid grid-cols-1 gap-4 lg:grid-cols-3 sm:grid-cols-2  pt-20">
        {nfts.map((nft, i) => (
          <NftCard nft={nft} key={i} buyNFT={buyNFT}></NftCard>
        ))}
      </div>
    </Layout>
  );
}
